name: Build, Test & Create Artifact(CI)

on:
  workflow_call:
    inputs:
      solution_name:
        type: string
      package_project:
        description: 'Name of the main package project'
        default: 'Functions'
        required: false
        type: string        
      sonar_key:
        type: string
        required: true

permissions:
  contents: write
  deployments: write
  id-token: write    
   
jobs:     
  build-artifact:
    runs-on: ubuntu-latest
        
    steps:    
      - name: Checkout üõí
        uses: actions/checkout@v3
      
      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.1.1          

      - name: RUN .NET Restore üå±
        run: |
          dotnet restore ./src

      - name: Setup .NET 6 SDK ‚öôÔ∏è
        uses: actions/setup-dotnet@v2.1.0
        with:
          dotnet-version: 6.x    

      - name: Check for vulnerabilities (SNYK) üîç
        uses: snyk/actions/dotnet@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=./src/${{ inputs.solution_name }} --policy-path=./src/.snyk --show-vulnerable-paths=all
          
      - name: Install AWS lambda tools
        run:  dotnet tool install -g Amazon.Lambda.Tools          
        
      - name: Build üèóÔ∏è
        run: dotnet build ./src/${{ inputs.solution_name }} --configuration Release --no-restore

      - name: Run tests
        run: dotnet test ./src/${{ inputs.solution_name }} --configuration Release --no-restore --no-build --verbosity normal --filter "FullyQualifiedName!~IntegrationTests" 
          
      - name: Run SonarScanner ü¶∫
        uses: highbyte/sonarscan-dotnet@v2.1.3
        with:          
          sonarProjectKey: ${{ inputs.sonar_key }}        # The key of the SonarQube project          
          sonarProjectName:  ${{ inputs.sonar_key }}      # The name of the SonarQube project          
          sonarOrganization: efteling                           # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.   
          dotnetBuildArguments: ./src/${{ inputs.solution_name }}         # Optional command arguments to dotnet build          
          dotnetTestArguments: ./src/${{ inputs.solution_name }} --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover   # Optional command arguments to dotnet test         
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx --filter "FullyQualifiedName!~IntegrationTests"                             # Optional extra command arguments the the SonarScanner 'begin' command
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and package lambda
        run: dotnet lambda package --project-location ./src/${{ inputs.package_project }}

      - name: Install CDK
        run: npm install aws-cdk -g
        
      - name: Synthesize
        run: cdk synth --quiet
        
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out        
        
    outputs:
      SNYK: ${{ env.artifact-build-info }}        
