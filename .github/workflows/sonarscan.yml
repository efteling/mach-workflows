name: Sonar scan

on:
  workflow_call:
    inputs:
      environment:
        type: string
      solution_name:
        type: string
        required: true
      sonar_key:
        type: string
        required: true
permissions:
  contents: write
  id-token: write    
   
jobs:     
  build_test_scan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:    
      - name: Checkout üõí
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.1.1          

      - name: RUN .NET Restore üå±
        run: |
          dotnet restore ./src

      - name: Setup .NET 6 SDK ‚öôÔ∏è
        uses: actions/setup-dotnet@v2.1.0
        with:
          dotnet-version: 6.x    
          
      - name: Run SonarScanner ü¶∫
        uses: highbyte/sonarscan-dotnet@v2.1.3
        with:          
          sonarProjectKey: ${{ inputs.sonar_key }}        # The key of the SonarQube project          
          sonarProjectName:  ${{ inputs.sonar_key }}      # The name of the SonarQube project          
          sonarOrganization: efteling                           # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.   
          dotnetBuildArguments: ./src/${{ inputs.solution_name }}         # Optional command arguments to dotnet build          
          dotnetTestArguments: ./src/${{ inputs.solution_name }} --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover --filter "FullyQualifiedName!~IntegrationTests"   # Optional command arguments to dotnet test         
          sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"                             # Optional extra command arguments the the SonarScanner 'begin' command
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
