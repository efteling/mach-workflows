name: CI

on:
  workflow_call:
    inputs:
      solution_name:
        type: string
      # sonar_key:
      #   type: string
      #   required: true

permissions:
  contents: write
  deployments: write
  id-token: write    
   
jobs:     
  ci:
    name: Check, Buid, Test and Synthesize
    runs-on: ubuntu-latest
        
    steps:    
      - name: Checkout
        uses: actions/checkout@v3
                  
      - name: Setup .NET 6 SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x
                  
      - name: Restore dependencies
        run: dotnet restore src --runtime linux-x64
      
      - name: Check for vulnerabilities
        uses: snyk/actions/dotnet@master
        with:
          args: --all-projects --policy-path=.snyk --show-vulnerable-paths=all
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}        
      
      - name: Check code style
        run: dotnet format style src --no-restore --verify-no-changes
        
      - name: Code analysis
        uses: dotnet/code-analysis@v1
        id: code-analysis
        with:
          solution: src
          build-breaking: true
          all-categories: all
      
      - name: Build
        run: dotnet build src --configuration Release --no-restore -warnaserror

      - name: Test
        run: dotnet test src --configuration Release --no-build --filter "FullyQualifiedName~UnitTests|FullyQualifiedName~Component"
          
      # - name: SonarScanner
      #   uses: highbyte/sonarscan-dotnet@v2.1.3
      #   with:          
      #     sonarProjectKey: ${{ inputs.sonar_key }}        # The key of the SonarQube project          
      #     sonarProjectName:  ${{ inputs.sonar_key }}      # The name of the SonarQube project          
      #     sonarOrganization: efteling                           # The name of the SonarQube organization in SonarCloud. For hosted SonarQube, skip this setting.   
      #     dotnetBuildArguments: ./src/${{ inputs.solution_name }}         # Optional command arguments to dotnet build          
      #     dotnetTestArguments: ./src/${{ inputs.solution_name }} --filter "FullyQualifiedName!~IntegrationTests" --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover   # Optional command arguments to dotnet test         
      #     sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"                            # Optional extra command arguments the the SonarScanner 'begin' command
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install CDK
        run: npm install aws-cdk -g
                
      - name: Install AWS lambda tools
        run:  dotnet tool install -g Amazon.Lambda.Tools
        
      - name: Synthesize
        run: cdk synth --quiet --ci
        
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: cdk.out
          path: cdk.out        
        
    outputs:
      SNYK: ${{ env.artifact-build-info }}        
